package climbingStairs

// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//
//每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//示例 1：
//输入：n = 2
//输出：2
//解释：有两种方法可以爬到楼顶。
//1. 1 阶 + 1 阶
//2. 2 阶
//示例 2：
//输入：n = 3
//输出：3
//解释：有三种方法可以爬到楼顶。
//1. 1 阶 + 1 阶 + 1 阶
//2. 1 阶 + 2 阶
//3. 2 阶 + 1 阶
//提示：
//1 <= n <= 45

// 解题思路
// 定义 dp[i] 为爬到第 i 阶楼梯的方法数。
// 对于第 i 阶楼梯，我们可以从第 i-1 阶爬 1 步到达，或者从第 i-2 阶爬 2 步到达。
// 因此，dp[i] = dp[i-1] + dp[i-2]
// 初始条件：dp[1] = 1, dp[2] = 2
// 时间复杂度：O(n)
// 空间复杂度：O(n)

// climbStairs
func climbStairs(n int) int {
	if n <= 2 {
		return n
	}

	dp := make([]int, n+1)
	dp[1] = 1
	dp[2] = 2
	for i := 3; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n]
}
